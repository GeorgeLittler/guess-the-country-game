# Generated by Django 5.1.7 on 2025-04-15 20:31

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
        ),
        migrations.CreateModel(
            name='Clue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='The text of the clue. Should be between 100 and 400 characters.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', help_text='The current status of the clue.', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this clue was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when this clue was last updated.')),
                ('submitted_by', models.ForeignKey(help_text='The user who submitted this clue.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submitted_clues', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Clues',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='clues_seen',
            field=models.ManyToManyField(blank=True, help_text='Clues that have been seen by this user.', related_name='seen_by_users', to='api.clue'),
        ),
        migrations.CreateModel(
            name='ClueCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the clue category.', max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Clue Categories',
                'indexes': [models.Index(fields=['name'], name='api_cluecat_name_827e07_idx')],
            },
        ),
        migrations.AddField(
            model_name='clue',
            name='category',
            field=models.ForeignKey(help_text='The category this clue belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='clues', to='api.cluecategory'),
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the country.', max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'indexes': [models.Index(fields=['name'], name='api_country_name_482826_idx')],
            },
        ),
        migrations.AddField(
            model_name='clue',
            name='country',
            field=models.ForeignKey(help_text='The country this clue is about.', on_delete=django.db.models.deletion.CASCADE, related_name='clues', to='api.country'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='api_user_usernam_edfd3a_idx'),
        ),
        migrations.AddIndex(
            model_name='clue',
            index=models.Index(fields=['status'], name='api_clue_status_43e232_idx'),
        ),
        migrations.AddIndex(
            model_name='clue',
            index=models.Index(fields=['country', 'category'], name='api_clue_country_2cc3d7_idx'),
        ),
        migrations.AddIndex(
            model_name='clue',
            index=models.Index(fields=['submitted_by'], name='api_clue_submitt_77c317_idx'),
        ),
        migrations.AddIndex(
            model_name='clue',
            index=models.Index(fields=['created_at'], name='api_clue_created_f4f260_idx'),
        ),
    ]
